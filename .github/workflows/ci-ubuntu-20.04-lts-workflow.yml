name: CI-Ubuntu-20.04-LTS

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  rockylinux-build-test:
    name: rockylinux build & test
    strategy:
      matrix:
        image: ['rockylinux:8']
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    env:
      CC: gcc
      CXX: g++
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
    steps:
      - name: Install packages
        run: |
          dnf update -y
          dnf install -y git cmake gcc gcc-c++ ${{ matrix.image == 'rockylinux:8' && 'python39 python39-devel' || 'python3-pip' }} npm java-17-openjdk

      - uses: actions/checkout@v3

      - name: Ensure Python dependencies
        run: |
          pip3 install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu
          pip3 install --user -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html

      - name: Ensure Node.js dependencies
        run: npm install --include=dev
        working-directory: tools/nodejs_api

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-update-default-toolchain
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          $HOME/.cargo/bin/rustup toolchain install 1.67

      - name: Build and test
        if: matrix.image != 'rockylinux:8'
        run: make release NUM_THREADS=$(nproc)

      - name: C Example
        working-directory: examples/c
        run: |
          mkdir build -p
          cd build
          cmake ..
          cmake --build .

      - name: C++ Example
        working-directory: examples/cpp
        run: |
          mkdir build -p
          cd build
          cmake ..
          cmake --build .

      - name: Python test
        run: make pytest NUM_THREADS=$(nproc)
      
      - name: Node.js test
        run: make nodejstest NUM_THREADS=$(nproc)

      - name: Java test
        run: make javatest NUM_THREADS=$(nproc)

      - name: Rust share build
        # Share build cache when building rust API and the example project
        run: echo '[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV

      - name: Rust test
        working-directory: tools/rust_api
        run: |
          cargo update -p half@2.3.1 --precise '2.2.1'
          cargo update -p time --precise '0.3.23'
          cargo test --features arrow -- --test-threads=1

      - name: Rust example
        working-directory: examples/rust
        run: cargo build --features arrow
