-GROUP TinySnbReadTest
-DATASET CSV tinysnb

--

-CASE SingleUpperBound
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:knows*..2]->(b:person) RETURN COUNT(*);
---- 1
12
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:knows*..1]->(b:person) RETURN b.fName;
---- 3
Bob
Carol
Dan

-CASE SingleLowerBound
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*2..]->(b:person) RETURN a.fName, b.fName;
---- 1
Alice|Dan
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*3..]->(b:person) RETURN a.fName, b.fName;
---- 0
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*1..]->(b:person) RETURN a.fName, b.fName;
---- 2
Alice|Bob
Alice|Dan

-CASE SingleNodeBound
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*2]->(b:person) RETURN b.fName;
---- 1
Dan
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*1]->(b:person) RETURN b.fName;
---- 1
Bob
-STATEMENT MATCH(a:person {fName: "Elizabeth"})-[e:meets*1]-(b:person) RETURN b.fName;
---- 2
Carol
Carol
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*3]->(b:person) RETURN b.fName;
---- 0
-STATEMENT CALL var_length_extend_max_depth=10;
---- ok
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*]-(b:person) RETURN COUNT(*);
---- 1
484

-CASE BothBound
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*1..1]->(b:person) RETURN b.fName;
---- 1
Bob
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets]->(b:person {ID: 11, fName: "Mike"});
---- ok
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*1..3]->(b:person) RETURN b.fName;
---- 3
Bob
Dan
Mike
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*2..3]->(b:person) RETURN b.fName;
---- 2
Dan
Mike
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*3..3]->(b:person) RETURN b.fName;
---- 1
Mike
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*3..4]->(b:person) RETURN b.fName;
---- 1
Mike

-CASE SingleAsterisk
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets]->(b:person {ID: 11, fName: "Mike"});
---- ok
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*]->(b:person) RETURN b.fName;
---- 3
Bob
Dan
Mike
-STATEMENT MATCH(a:person {fName: "Bob"})<-[e:meets*]-(b:person) RETURN b.fName;
---- 2
Alice
Hubert Blaine Wolfeschlegelsteinhausenbergerdorff

-CASE NoBound
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets]->(b:person {ID: 11, fName: "Mike"});
---- ok
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*..]->(b:person) RETURN b.fName;
---- 3
Bob
Dan
Mike
-STATEMENT MATCH(a:person {fName: "Bob"})<-[e:meets*..]-(b:person) RETURN b.fName;
---- 2
Alice
Hubert Blaine Wolfeschlegelsteinhausenbergerdorff

-CASE CreateRangeLiteralTest
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets*]->(b:person {ID: 11, fName: "Mike"});
---- error
QueryPlanner::getProperties
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)<-[:meets*..]-(b:person {ID: 11, fName: "Mike"});
---- error
QueryPlanner::getProperties
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets*2]-(b:person {ID: 11, fName: "Mike"});
---- error
QueryPlanner::getProperties
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets*2..4]->(b:person {ID: 11, fName: "Mike"});
---- error
QueryPlanner::getProperties
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)<-[:meets*3..]-(b:person {ID: 11, fName: "Mike"});
---- error
QueryPlanner::getProperties
-STATEMENT MATCH (c:person) WHERE c.fName="Dan" CREATE(c)-[:meets*..3]->(b:person {ID: 11, fName: "Mike"});
---- error
QueryPlanner::getProperties

-CASE ExceedsVarLengthExceptionTest
-STATEMENT CALL var_length_extend_max_depth=10;
---- ok
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*11..23]->(b:person) RETURN b.fName;
---- error
Binder exception: Upper bound of rel exceeds maximum: 10.
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*..11]->(b:person) RETURN b.fName;
---- error
Binder exception: Upper bound of rel exceeds maximum: 10.
-STATEMENT MATCH(a:person {fName: "Alice"})-[e:meets*11]->(b:person) RETURN b.fName;
---- error
Binder exception: Upper bound of rel exceeds maximum: 10.
